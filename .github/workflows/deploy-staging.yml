name: Release to staging

on:
  workflow_dispatch:
    inputs:
      copy-develop:
        description: Copy values from develop
        type: boolean
        required: true
        default: true
      notify-slack:
        description: Send Slack message
        type: boolean
        required: true
        default: true

permissions:
  id-token: write
  contents: write

concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  compare:
    runs-on: ubuntu-latest
    outputs:
      version-summary: ${{ steps.build-comparison.outputs.VERSION_SUMMARY }}
    steps:
      - uses: actions/checkout@v4
      - name: Compare develop to production
        id: build-comparison
        run: |
          SOURCE=develop
          TARGET=production
          touch version-summary.md

          echo "| Service | New ($SOURCE) | Current ($TARGET) | Changes |" >> version-summary.md
          echo "| --- | --- | --- | --- |" >> version-summary.md
          jq --raw-output '.services | keys[]' "config/$SOURCE.json" | while read -r SERVICE_NAME; do SERVICE_REPO=$(jq --raw-output --arg service "$SERVICE_NAME" '.services[$service].repo' "config/$SOURCE.json") && SERVICE_SOURCE=$(jq --raw-output --arg service "$SERVICE_NAME" '.services[$service].version' "config/$SOURCE.json") && SERVICE_TARGET=$(jq --raw-output --arg service "$SERVICE_NAME" '.services[$service].version' "config/$TARGET.json") && [ "$SERVICE_SOURCE" != "$SERVICE_TARGET" ] && echo "| $SERVICE_NAME | \`$SERVICE_SOURCE\` | \`$SERVICE_TARGET\` | [Compare]($SERVICE_REPO/compare/v$SERVICE_TARGET...v$SERVICE_SOURCE) |" >> version-summary.md || echo "| $SERVICE_NAME | \`$SERVICE_SOURCE\` | \`$SERVICE_TARGET\` | [No changes] |" >> version-summary.md; done

          SUMMARY=$(<version-summary.md)
          echo "## Changes" >> $GITHUB_STEP_SUMMARY
          echo "\`develop\` -> \`staging\`" >> $GITHUB_STEP_SUMMARY
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          SUMMARY_CLEAN=$(sed -e "s/\`/\\\\\`/g" version-summary.md)
          {
            echo 'VERSION_SUMMARY<<EOF'
            echo "$SUMMARY_CLEAN"
            echo EOF
          } >> $GITHUB_OUTPUT

  create-release:
    runs-on: ubuntu-latest
    needs:
      - compare
    environment:
      name: staging
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      verion: ${{ steps.version-tag.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - id: version-tag
        name: Create release version
        run: |
          VERSION=$(date +%y.%m.%d).${{ github.run_number }}
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Set up git
        run: |
          git config --global user.name "${{ github.triggering_actor }}"
          git config --global user.email "<>"
      - name: Copy config from develop to staging
        if: inputs.copy-develop
        run: |
          cp config/develop.json config/staging.json
          git add config/staging.json
          git commit -m "Release v${{ steps.version-tag.outputs.VERSION }} to staging" || true
          git push
      - name: Create tag and release
        run: |
          git tag "v${{ steps.version-tag.outputs.VERSION }}" -m "Release ${{ steps.version-tag.outputs.VERSION }}"
          git push origin --tags
          echo "${{ needs.compare.outputs.version-summary }}" > release-notes.md
          gh release create "v${{ steps.version-tag.outputs.VERSION }}" --title "v${{ steps.version-tag.outputs.VERSION }}" --draft -F release-notes.md --latest

  notify-start:
    runs-on: ubuntu-latest
    needs:
      - create-release
    if: inputs.notify-slack
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: Website deployment
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://raw.githubusercontent.com/nationalarchives/tna-frontend/main/src/nationalarchives/assets/images/apple-touch-icon.png
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: #888888
          MSG_MINIMAL: true
          ENABLE_ESCAPES: true
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: "üßë‚Äçüíª Release **v${{ needs.create-release.outputs.verion }}** created and deploying to staging..."

  deploy:
    runs-on: ubuntu-latest
    needs:
      - create-release
    strategy:
      matrix:
        service:
          - frontend
          - enrichment
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-release.outputs.verion }}
      - name: Deploy service
        uses: ./.github/actions/deploy
        with:
          config-file: staging.json
          service-name: ${{ matrix.service }}
          aws-role: arn:aws:iam::337670467269:role/GitHubActionRole
          parameter-path: /application/web/${{ matrix.service }}/docker_images
          deployed-parameter-path: /application/web/${{ matrix.service }}/deployed_version

  tests:
    runs-on: ubuntu-latest
    needs:
      - deploy
    env:
      GH_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN_TEST_RUNNER }}
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: |
          gh workflow run manual.yml --repo nationalarchives/ds-tna-website-tests --raw-field domain=https://staging-www.nationalarchives.gov.uk --raw-field exclude-tests=@wip --raw-field notify-slack-on-pass=${{ inputs.notify-slack }} --raw-field notify-slack-on-fail=${{ inputs.notify-slack }} --raw-field description="$(git log -1 --pretty=%B | sed '/./,$!d' | sed '/^$/d' | sed 's/^/> /')"
          sleep 5
          gh run watch --exit-status --repo nationalarchives/ds-tna-website-tests $(gh run list --repo nationalarchives/ds-tna-website-tests --workflow manual.yml -L1 --json databaseId --jq .[0].databaseId)

  notify-end-status:
    runs-on: ubuntu-latest
    needs:
      - create-release
      - tests
    if: inputs.notify-slack
    steps:
      - uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_TITLE: Website deployment
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://raw.githubusercontent.com/nationalarchives/tna-frontend/main/src/nationalarchives/assets/images/apple-touch-icon.png
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: success
          MSG_MINIMAL: true
          ENABLE_ESCAPES: true
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: "üß™ Release **v${{ needs.create-release.outputs.verion }}** deployed to staging: [staging-www.nationalarchives.gov.uk](http://staging-www.nationalarchives.gov.uk/)"
      - uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_TITLE: Website deployment
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://raw.githubusercontent.com/nationalarchives/tna-frontend/main/src/nationalarchives/assets/images/apple-touch-icon.png
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: failure
          MSG_MINIMAL: true
          ENABLE_ESCAPES: true
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: "‚ùå Release **v${{ needs.create-release.outputs.version }}** failed to deploy to staging"
