name: Deploy service

inputs:
  config-file:
    required: true
    type: string
  service-name:
    required: true
    type: string
  aws-role:
    required: true
    type: string
  parameter-path:
    required: true
    type: string
  deployed-parameter-path:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: GitHubActionsSession

    - name: Update AWS Parameter Store
      shell: bash
      id: update
      run: |
        echo "Fetching version from config/${{ inputs.config-file }}..."

        NEW_VERSION=$(jq -r '.services."'${{ inputs.service-name }}'".version' config/${{ inputs.config-file }})
        NEW_IMAGE=$(jq -r '.services."'${{ inputs.service-name }}'".image' config/${{ inputs.config-file }})

        echo "Extracted NEW_IMAGE=$NEW_IMAGE"
        echo "Extracted NEW_VERSION=$NEW_VERSION"

        if [[ -z "$NEW_VERSION" || "$NEW_VERSION" == "null" || -z "$NEW_IMAGE" || "$NEW_IMAGE" == "null" ]]; then
          echo "‚ùå Error: Could not retrieve version or image for ${{ inputs.service-name }}"
          exit 1
        fi

        echo "Updating the AWS Parameter Store..."

        OLD_VALUE=$(aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text)
        echo "Current parameter value: $OLD_VALUE"

        NEW_VALUE=$(echo $OLD_VALUE | jq '.["'${{ inputs.service-name }}'-application"] = "'$NEW_IMAGE:$NEW_VERSION'"')
        echo "New parameter value: $NEW_VALUE"

        aws ssm put-parameter --name "${{ inputs.parameter-path }}" --value "$NEW_VALUE" --type String --overwrite

        echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"

    - name: Verify the update
      shell: bash
      run: |
        echo "‚úÖ Verifying the updated value..."
        aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text

    - name: Trigger Lambda function
      shell: bash
      run: |
        echo "üöÄ Triggering Lambda function..."
          SERVICE="${{ inputs.service-name }}"

          jq -n --arg service "$SERVICE" '{service: $service}' > payload.json
          echo "Payload:"
          cat payload.json

          aws lambda invoke \
            --function-name AutoRunStartupScript \
            --payload file://payload.json \
            response.json \
            --log-type Tail \
            --query 'StatusCode' \
            --output text > lambda_status.txt


        RESPONSE=$(cat lambda_status.txt)
        echo "Lambda HTTP Status: $RESPONSE"
        echo "Lambda raw response:"
        cat response.json

        # Get actual service status from Lambda's response
        STATUS_CODE=$(jq -r --arg svc "$SERVICE" '.[$svc].statusCode // 200' response.json)

        if [[ "$STATUS_CODE" -ne 200 ]]; then
          echo "‚ùå Lambda deployment failed for $SERVICE with statusCode: $STATUS_CODE"
          exit 1
        fi

    - name: Wait for the deployed version to update
      shell: bash
      run: |
        echo "‚è≥ Waiting for the deployed version to update..."
        MAX_RETRIES=20
        RETRY_COUNT=0

        while true; do
          DEPLOYED_VERSION=$(aws ssm get-parameter --name "${{ inputs.deployed-parameter-path }}" --query "Parameter.Value" --output text)

          if [[ "$DEPLOYED_VERSION" == "${{ env.NEW_VERSION }}" ]]; then
            echo "‚úÖ Deployed version matches expected version: $DEPLOYED_VERSION"
            break
          fi

          echo "Current deployed version: $DEPLOYED_VERSION (Expected: ${{ env.NEW_VERSION }})"
          RETRY_COUNT=$((RETRY_COUNT + 1))

          if [[ $RETRY_COUNT -ge $MAX_RETRIES ]]; then
            echo "‚ùå Timed out waiting for deployed version to update."
            exit 1
          fi

          sleep 2
        done
