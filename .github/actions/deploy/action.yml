name: Deploy service

inputs:
  config-file:
    required: true
    type: string
  service-name:
    required: true
    type: string
  aws-role:
    required: true
    type: string
  parameter-path:
    required: true
    type: string
  deployed-parameter-path:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: GitHubActionsSession

    - name: Update AWS Parameter Store
      id: update
      run: |
        OLD_VALUE=$(aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text)
        OLD_VERSION=$(jq '."${{ inputs.service-name }}-application"' <<< "$OLD_VALUE")

        echo "Fetching version from config/${{ inputs.config-file }}..."
        NEW_IMAGE=$(jq -r '.services.${{ inputs.service-name }}.image' config/${{ inputs.config-file }})
        NEW_VERSION=$(jq -r '.services.${{ inputs.service-name }}.version' config/${{ inputs.config-file }})

        echo "$OLD_VERSION ---> $NEW_IMAGE:$NEW_VERSION"

        echo "Updating the AWS Parameter Store..."
        NEW_VALUE=$(echo $OLD_VALUE | jq ".\"${{ inputs.service-name }}-application\" |= \"$NEW_IMAGE:$NEW_VERSION\"")

        echo "Updating /application/web/${{ inputs.service-name }}/docker_images..."
        aws ssm put-parameter --name "${{ inputs.parameter-path }}" --value "$NEW_VALUE" --type String --overwrite

        echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Verify the update
      run: |
        echo "Verifying the updated value..."
        aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text
      shell: bash

    - name: Trigger Lambda function
      run: |
        echo "Triggering lambda function ..."
        VERSION="${{ steps.update.outputs.NEW_VERSION }}"
        PAYLOAD=$(jq -n --arg version "$VERSION" '{deployed_version:$version}' | base64)
        RETRIES=5
        for i in $(seq 1 $RETRIES); do
          RESPONSE=$(aws lambda invoke --function-name AutoRunStartupScript --payload "$PAYLOAD" response.json)
          if [[ -f response.json && $( jq -r '.StatusCode' response.json) -eq 200 ]]; then
            echo "Lambda function triggered successfully"
            cat response.json
            break
          else
            echo "Failed to trigger lambda function. Retrying..."
            if [[ $i -eq $RETRIES ]]; then
              echo "Failed to trigger lambda function after $RETRIES retries"
              exit 1
            fi
            sleep 5
          fi
        done
      shell: bash

    - name: Wait for the deployed version to update
      run: |
        echo "Checking for the deployed version..."
        while sleep 2 && DEPLOYED_VERSION=$(aws ssm get-parameter --name "${{ inputs.deployed-parameter-path }}" --query "Parameter.Value" --output text) && [[ "$DEPLOYED_VERSION" != "${{ steps.update.outputs.NEW_VERSION }}" ]]; do
          echo "Currently deployed version: $DEPLOYED_VERSION"
        done 
        echo "Deployment completed successfully: $DEPLOYED_VERSION"
      shell: bash
