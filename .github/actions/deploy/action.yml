name: Deploy service

inputs:
  config-file:
    required: true
    type: string
  service-name:
    required: true
    type: string
  aws-role:
    required: true
    type: string
  parameter-path:
    required: true
    type: string
  deployed-parameter-path:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: GitHubActionsSession

    - name: Update AWS Parameter Store
      shell: bash
      id: update
      output:
        updated: ${{ steps.update.outputs.UPDATED }}
      run: |
        echo "Fetching version from config/${{ inputs.config-file }}..."

        NEW_VERSION=$(jq -r '.services."'${{ inputs.service-name }}'".version' config/${{ inputs.config-file }})
        NEW_IMAGE=$(jq -r '.services."'${{ inputs.service-name }}'".image' config/${{ inputs.config-file }})

        echo "Extracted NEW_IMAGE=$NEW_IMAGE"
        echo "Extracted NEW_VERSION=$NEW_VERSION"

        if [[ -z "$NEW_VERSION" || "$NEW_VERSION" == "null" || -z "$NEW_IMAGE" || "$NEW_IMAGE" == "null" ]]; then
          echo "Error: Could not retrieve version or image for ${{ inputs.service-name }}"
          exit 1
        fi

        echo "Updating the AWS Parameter Store..."

        OLD_VALUE=$(aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text)

        echo "Current parameter value: $OLD_VALUE"

        NEW_VALUE=$(echo $OLD_VALUE | jq '.["'${{ inputs.service-name }}'-application"] = "'$NEW_IMAGE:$NEW_VERSION'"')

        echo "New parameter value: $NEW_VALUE"

        SHOULD_UPDATE=true

        if [[ "$NEW_VALUE" == "$OLD_VALUE" ]]; then
          echo "No changes detected in the parameter value."
          echo "Skipping update."
          SHOULD_UPDATE=false
        fi

        if $SHOULD_UPDATE
        then
          echo "Updating ${{ inputs.parameter-path }}..."
          aws ssm put-parameter --name "${{ inputs.parameter-path }}" --value "$NEW_VALUE" --type String --overwrite
        fi

        echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
        echo "UPDATED=$SHOULD_UPDATE" >> "$GITHUB_ENV"

    - name: Verify the update
      shell: bash
      if: steps.update.outputs.updated == 'true'
      run: |
        echo "Verifying the updated value..."
        aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text

    - name: Trigger Lambda function
      shell: bash
      if: steps.update.outputs.updated == 'true'
      run: |
        echo "Triggering lambda function ..."
        SERVICE="${{ inputs.service-name }}"
        PAYLOAD=$(jq -n --arg service "$SERVICE" '{service: $service}' | base64)
        RESPONSE=$(aws lambda invoke --function-name AutoRunStartupScript --payload "$PAYLOAD" response.json --log-type Tail --query 'StatusCode' --output text --cli-read-timeout 0)
        echo "Lambda function response: $RESPONSE"
        cat response.json

        if [[ "$RESPONSE" -ne 200 ]]; then
          echo "Failed to trigger the lambda function"
          exit 1
        fi

    - name: Wait for the deployed version to update
      shell: bash
      if: steps.update.outputs.updated == 'true'
      run: |
        echo "Checking for the deployed version..."
        MAX_RETRIES=20
        RETRY_COUNT=0

        DEPLOYED_VERSION=$(aws ssm get-parameter --name "${{ inputs.deployed-parameter-path }}" --query "Parameter.Value" --output text)

        while [[ "$DEPLOYED_VERSION" != "${{ env.NEW_VERSION }}" ]] && [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
          echo "Current deployed version: $DEPLOYED_VERSION"
          sleep 2
          DEPLOYED_VERSION=$(aws ssm get-parameter --name "${{ inputs.deployed-parameter-path }}" --query "Parameter.Value" --output text)
          RETRY_COUNT=$((RETRY_COUNT+1))
        done

        if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
          echo "Failed to update the deployed version"
          exit 1
        fi

        echo "Deployed version: $DEPLOYED_VERSION"
