name: Deploy service

inputs:
  config-file:
    required: true
    type: string
  service-name:
    required: true
    type: string
  aws-role:
    required: true
    type: string
  parameter-path:
    required: true
    type: string
  deployed-parameter-path:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: GitHubActionsSession

    - name: Update AWS Parameter Store
      id: update
      run: |
        OLD_VALUE=$(aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text)
        OLD_VERSION=$(jq ".\"${{ inputs.service-name }}-application\"" <<< "$OLD_VALUE")

        echo "Fetching version from config/${{ inputs.config-file }}..."
        NEW_IMAGE=$(jq -r '.services.${{ inputs.service-name }}.image' config/${{ inputs.config-file }})
        NEW_VERSION=$(jq -r '.services.${{ inputs.service-name }}.version' config/${{ inputs.config-file }})

        echo "$OLD_VERSION ---> $NEW_IMAGE:$NEW_VERSION"

        echo "Updating the AWS Parameter Store..."
        NEW_VALUE=$(echo $OLD_VALUE | jq ".\"${{ inputs.service-name }}-application\" |= \"$NEW_IMAGE:$NEW_VERSION\"")

        echo "Updating /application/web/${{ inputs.service-name }}/docker_images..."
        aws ssm put-parameter --name "${{ inputs.parameter-path }}" --value "$NEW_VALUE" --type String --overwrite

        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Verify the update
      run: |
        echo "Verifying the updated value..."
        aws ssm get-parameter --name "${{ inputs.parameter-path }}" --query "Parameter.Value" --output text
      shell: bash

    - name: Wait for the deployed version to update
      run: |
        echo "Checking for the deployed version..."
        TIMEOUT=120
        START_TIME=$(date +%s)
        while sleep 2; do
          DEPLOYED_VERSION=$(aws ssm get-parameter --name "${{ inputs.deployed-parameter-path }}" --query "Parameter.Value" --output text | tr -d '[:space:]')
          echo "Current deployed version: $DEPLOYED_VERSION"
          echo "Expected version: ${{ env.NEW_VERSION }}"
          if [ "$DEPLOYED_VERSION" == "$NEW_VERSION" ]; then
            echo "Deployed version updated successfully! : $DEPLOYED_VERSION"
            break
          fi
          CURRENT_TIME=$(date +%s)
          if [ $((CURRENT_TIME - START_TIME)) -gt $TIMEOUT ]; then
            echo "Timeout reached. Deployed version not updated."
            exit 1
          fi
        done
      shell: bash
      
       